\input texinfo
@c %**start of header
@set PROGNAME Carramba Libs Package
@include version.texi
@settitle Carramba Libs API Reference 
@setfilename carramba-libs.info
@afourpaper
@documentlanguage en_US
@documentencoding UTF-8
@c %**end of header

@copying
This manual is for @value{PROGNAME} (version @value{VERSION}, @value{UPDATED})
@sp 1
Copyright @copyright{}  2019  Pawel Sobotka.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".
@sp 1
Examples and sources code included in this document are part of @value{PROGNAME}.

@value{PROGNAME} is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

@value{PROGNAME} is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with @value{PROGNAME}.  If not, see <@uref{http://www.gnu.org/licenses/}>.

@end copying

@dircategory GNU libraries
@direntry
* carramba-libs: (carramba-libs)			library to validate personal number  PESEL, NIP, REGON, IBAN                    
@end direntry

@titlepage
@title Carramba Libs API Reference Manual
@subtitle for version @value{VERSION}, @value{UPDATED}
 
@author Pawel Sobotka <@email{starywandal@@onet.pl}>

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning
@contents

@iftex
@node Top
@top Carramba Libs API Reference
@cindex About this manual

What is Carramba Libs? It is a library written for validate personal number like: PESEL, IBAN, NIP, REGON. These numbers are polish personal numbers and are use in Polish goverment administrations. For what was library such as Carramba Libs written? In many country, polish citizens travels, working and enjoys own free time. In business contacts knowledge whois my partner is very important and I will be told, nothing is much importants like these knowledge. Personal numbers like NIP and REGON identify the partner in business directly. When you travel outside our contry, PESEL number do these same. And is very important for users @result{} this library uses Open Source licensing models and you can look inside and test if it is useful and secure for you.

@end iftex

@ifnottex
@node Top
@top Carramba Libs API Reference
@cindex About this manual

Carramba Libs API Reference Manual. Carramba Libs is a library prepared for check correctness imoprtant personal numbers like PESEL, NIP, REGON and IBAN.
 
@menu
* A piece of theory::   introduction to theory of validation personal numbers.
* API function::        API function desciption
* Header file::	        caramba-libs.h header file
* pkg-config support::  pkg-config support
* Index::               Complete index
* Function Index::      Complete library function index
* Copying::             Your rights and freedoms.
@end menu

@end ifnottex

@node A piece of theory, PESEL number, Top
@chapter A piece of theory.
@cindex A piece of theory.

While checking the correctness of numbers, there is a simple rule: the whole number consists of numbers, each of these digits is multiplied by the balance and the last one, we add products and calculate the sum mod 10 (11), the final digit in the number is a checksum that must match the calculated.

@ifnottex

@menu
* PESEL number::
* NIP number::
* REGON number::
* IBAN number::
@end menu

@end ifnottex

@node PESEL number, NIP number, A piece of theory
@section PESEL number
@cindex PESEL number

The PESEL number consists of 10 digits, the last one(11) is a checksum. I will not describe the components of a PESEL number, all can be found on the Internet. Briefly, validation is done by:

@example
checksum = 
(a*1 + b*3 + c*7 + d*9 + e*1 + f*3 + g*7 + h*9 + i*1 + j*3) mod 10; 

sum = 10 - checksum;

if sum == 10; then sum = 0; => must be y = 0;

if sum == y; then return NUMBER_VALID; else return NUMBER_INVALID;

weight[] = @{1,3,7,9,1,1,3,7,9,1@}; => balance
@end example

@node NIP number, REGON number, PESEL number, A piece of theory
@section NIP number
@cindex NIP number

The NIP number consists of 9 digits and the last 10 is the checksum. You can find out more about the NIP number on the Internet. How to calculate the checksum? It is very simple @dots{}

@example

1 2 3 4 5 6 7 8 9 10 
a b c d e f g h i     -> next digits in the NIP number
x x x x x x x x x  y  -> the balance of each digit, y -> checksum

@end example

To calculate the checksum, multiply each digit by balance, add the products to each other and calculate the checksum mod 11

@example

checksum = 
(a*6 + b*5 + c*7 + d*2 + e*3 + f*4 + g*5 + h*6 + i*7) mod 11; 

if checksum == 10; then checksum = 0; => must be y = 0;

if checksum == y; then return NUMBER_VALID; else return NUMBER_INVALID;

weight[] = @{6,5,7,2,3,4,5,6,7@}; => balance

@end example

@node REGON number, IBAN number, NIP number, A piece of theory
@section REGON number
@cindex REGON number

REGON number consists of 7, 9 or 14 digits, where the last of digits is a checksum. As with the numbers NIP and PESEL, digits from the REGON number are multiplied by the weight, the products are added to each other and the sum calculated modulo 11

@example

weight7[]  = @{2,3,4,5,6,7@};
weight9[]  = @{8,9,2,3,4,5,6,7@};
weight14[] = @{2,4,8,5,0,9,7,3,6,1,2,4,8@};
if checksum == 10; then checksum = 0; 

@end example

The calculation is made as for the other numbers.

@node IBAN number, API function, REGON number, A piece of theory
@section IBAN number
@cindex IBAN number

To verify the correctness of the IBAN number, its check sum should be calculated. In Poland, the IBAN number consists of 28 characters, the first two being the country code (PL). The next two characters are the checksum (items 3 and 4) and the remaining ones are the correct bank account number. The account number is up to 30 alphanumeric characters, it is the bank's basic account number (BBAN), some of which must identify the bank. In Poland, BBAN consists of 24 digits, of which 8 digits form the bank's settlement number and the remaining 16 digits specify the customer's account number.

@example
@b{PLkk AAAAAAAA BBBBBBBBBBBBBBBB} => Polish IBAN number

@b{PL} => country code according to the standard
@uref{http://pl.wikipedia.org/wiki/ISO_3166-1, ISO-3166-1}

@b{kk} => checksum

@b{AAAAAAAA} => number identifying the bank

@b{BBBBBBBBBBBBBBBB} => client account number
@end example

The IBAN number is written without spaces.

In order to calculate the checksum, one should follow the algorithm:

@itemize @minus

@item
we always consider the full IBAN number including the country code

@item
we are moving the first four characters in the end
we change letters into strings of numbers such that A is @code{10}, B is @code{11} up to Z

@item
after changing letters into a string of digits, we obtained a string of numbers only, we calculate the sum of modulo 97 and if it is equal to 1 then the checksum is correct
@end itemize

A similar algorithm applies in other countries using the IBAN system.

@node API function, iban_validation_test, A piece of theory, Top
@chapter API function
@cindex API function
@cindex API library function

In this chapter I describe function provided by the library.

@example
int iban_validation_test(const char *iban)
int regon_validation_test(const char *regon)
int pesel_validation_test(const char *pesel)
int nip_validation_test(const char *nip)
const char *carramba_libs_version()
const char *carramba_libs_info(int format)
int carramba_libs_api_test(const char *number)
@end example

These function are provided by @value{PROGNAME}, below I will provide a more detailed description of each function. 

@node iban_validation_test, regon_validation_test, API function
@section IBAN validation function
@findex iban_validation_test()

@example
int iban_validation_test(const char* iban)
@end example

This function provides validate functionality by checking checksum of input string. Return value is depend of that, if input string is valid @code{RETURN_CODE_VALID} or not @code{RETURN_CODE_INVALID}. These two constants are defined in header file
@ifinfo 
@pxref{Header file, carramba-libs.h, carramba-libs,carramba-libs,Carramba Libs API Reference Manual}.
@end ifinfo
@iftex
@xref{Header file, carramba-libs.h, carramba-libs,carramba-libs,Carramba Libs API Reference Manual} .
@end iftex
@ifhtml
@pxref{Header file, carramba-libs.h, carramba-libs.h}.
@end ifhtml


Usage:
@example

#include    <carramba-libs.h>
#include    <malloc.h>
@dots{}

int test = 0;
char *buffer = (char*)malloc(40*sizeof(char));

printf("IBAN: ");

scanf("%s", &buffer);

test = iban_validation_test(buffer);

if (test == RETURN_CODE_VALID)
    printf("IBAN valid\n");
else
    printf("IBAN invalid\n");

free(buffer);

@enddots{}

@end example

Like you see implementation is very simply.

@node regon_validation_test, pesel_validation_test, iban_validation_test, API function
@section REGON validation function
@findex regon_validation_test()

@example
int regon_validation_test(const char* regon)
@end example

This library function test correctness of REGON number.  The REGON number is used to identify entities of the national economy and can consist of 7, 9 or 14 digits. Using the function is very simple:

@example

#include <carramba-libs.h>

@dots{}

const char* number = "";//here put your REGON number
int test = 0;//default value, that's nothings means

int len = strlen(number);//measure length of tested string

if (len = 7 || len == 9 || len ==14)
    test = regon_validation_test(number)
else
    printf("This %s isn't correct REGON number", number);

if (test == RETURN_CODE_VALID)
    printf(Number: %s is valid REGON number", number);
else
    printf("This %s is invalid REGON number", number);
    
@enddots{}

exit(EXIT_SUCCESS); 

@end example 

What this example does? The first you must declare some variable and of course tested number REGON. Next in condition @code{if @dots{} esle} you tested length of string and if are valid, use library function to test correctness of input number. Correct length of REGON are: 7, 9 or 14 digits. Return value is tested by conditional @code{if test == RETURN_CODE_VALID} and if test is TRUE, is printed response at stdin output. Constants @code{RETURN_VALUE_VALID} is defined in header file @xref{Header file, carramba-libs.h, carramba-libs.h, carramba-libs, Carramba Libs API Reference}, like also @code{RETURN_CODE_INVALID}. Returned value are equal to 1 and -1. Return value is always integer.


@node pesel_validation_test, nip_validation_test, regon_validation_test, API function
@section PESEL validation function
@findex pesel_validation_test()

@example
int pesel_validation_test(const char* pesel)
@end example

Personal number like PESEL are used for indentyfication individuals in the scope of their rights and privileges. PESEL consist of 11 digits and it also lets you check your gender(not implemented yet). Usage:

@example

#include <carramba-libs.h>

@dots{}

int test = 0;
char *pesel = "";//put here your PESEL

int len = strlen(pesel);

if (len == 11)
    test = pesel_validation_test(pesel);

if (test == RETURN_CODE_VALID)
    printf("PESEL: %s -> is valid!\n", pesel);
else
    printf("Input number: %s isn't PESEL or is invalid!\n", pesel);

exit(EXIT_SUCCESS);

@end example

Like you see above, it is easy to use this function.

@node nip_validation_test, carramba_libs_version, pesel_validation_test, API function
@section NIP validation function
@findex nip_validation_test()

@example
int nip_validation_test(const char* nip)
@end example

NIP number consist of 10 digits, it represents business entity and payer of contributions and taxes. Usage is like shown above

@node carramba_libs_version, carramba_libs_info, nip_validation_test, API function
@section Carramba Libs version print
@findex carramba_libs_version()

@example
const char* carramba_libs_version()
@end example

This function return veriosn package version number, which is the same as library version number.

@node carramba_libs_info, carramba_libs_api_test, API function
@section Carramba Libs info print
@findex carramba_libs_info()

@example
const char* carramba_libs_info(int format);
@end example

This function returns: short description about your right and freedom, about person who build package and about package build date. Variable @var{format} can take one of the third values:

@example

INFO_FORMAT_PLAINTEXT
       
INFO_FORMAT_MARKDOWN
        
INFO_FORMAT_MARKUP          

@end example 

which allows you to prepare the return value in an adjacent format.


@node carramba_libs_api_test, pkg-config support, carramba_libs_info, API function
@section Carramba Libs test function
@findex carramba_libs_api_test()

@example
int carramba_libs_api_test(const char* number)
@end example

This function is simple implementation of all library test function - one function, all test!

@example

/*
 * example01.c
 *  
 */

#include <carramba-libs.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <malloc.h>
#include <locale.h>

void show_answer(int @var{rest}, const char *@var{input});

int main(int argc, char **argv)
@{
	char *@var{input}; 
	int @var{rest} = 0;
	int @var{k} = 65;  
//---------------------------------------------------------------
	setlocale(LC_ALL, "C");
//---------------------------------------------------------------	
	const char *about = carramba_libs_info(INFO_FORMAT_PLAINTEXT);
	printf("%s\n", about);
//---------------------------------------------------------------	
	input = (char*)malloc(k*sizeof(char));
	input = readline("Enter personal number (PESEL|NIP|REGON|IBAN)\n@*(button ENTER ends input)\n(max. 64 characters in line): ");
	printf("\n");
//---------------------------------------------------------------
	int @var{len} = strlen(input);
	if (len == 0 )
	@{
		printf("Input error@dots{}\nEnded jobs!\n");
		if(input)
			free(input);
		exit(EXIT_FAILURE);
		
	@}	
//---------------------------------------------------------------
	rest = carramba_libs_api_test(input);	
//---------------------------------------------------------------
	show_answer(rest, input);
//---------------------------------------------------------------	
	if (input)
		free(input);		
//---------------------------------------------------------------
	exit(EXIT_SUCCESS);
@}


void show_answer(int @var{rest},  const char *@var{input})
@{
	int len = strlen(input);

	if (rest == RETURN_CODE_VALID && len == 11)
		printf("Number: %s is valid PESEL\n", input);
	else if ( rest == RETURN_CODE_VALID && (len == 10 || len == 12))
		printf("Number: %s is valid NIP!\n", input);
	else if (rest == RETURN_CODE_VALID && (len == 7 || len == 9 || len == 14))
		printf("Number: %s is valid REGON\n", input);
	else if ( rest == RETURN_CODE_VALID && len > 14 )
		printf("Number %s is valid IBAN!\n", input);
	else
		printf("You enter incorrect number!\nEnded jobs!\n");
@}		

@end example

To build type:

@example
gcc example01.c -o example01 -lreadline \
 `pkg-config --libs carramba-libs --cflags carramba-libs \ 
--with-path=/usr/local/lib/pkgconfig`
@end example

@node pkg-config support, Header file, API function, Top
@chapter pkg-config support
@cindex carramba-0.1.pc

Library provide @code{pkg-config} support by generate @code{carramba-libs.pc} file. What's inside file?

@example

prefix=@@prefix@@
exec_prefix=$@{prefix@}
package=@@PACKAGE@@
libdir=$@{exec_prefix@}/lib/$@{package@}
includedir=$@{prefix@}/include/$@{package@}
 
 
Name: Carramba Libs
Description: Carramba Libs - library for validate IBAN, NIP, REGON, PESEL
Version: 0.0.1
Libs: -L$@{libdir@} -Wl,-rpath -Wl,$@{libdir@} -lcarramba  -lgmp
Cflags: -I$@{includedir@}

@end example

To compile, just use code: 
@example

gcc @dots{} `pkg-config --libs carramba-libs --cflags \
 carramba-libs --with-path=/path/to/pkgconfig`

@end example


@node Header file, Index, API function, Top
@chapter Header file
@cindex carramba-libs.h

File @code{carramba-libs.h} is library header file. What is inside?

@example

#ifndef CARRAMBA_LIBS_H_
#define CARRAMBA_LIBS_H_

#define INFO_FORMAT_PLAINTEXT       0
#define INFO_FORMAT_MARKDOWN        10
#define INFO_FORMAT_MARKUP          20

#define RETURN_CODE_VALID           1
#define RETURN_CODE_INVALID         -1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

@enddots{}

#endif /* CARRAMBA_LIBS_H_ */

@end example

Show up are definitions some important constant, also are includes some header files standard C library. 

The most important definitions of constants are:

@example

#define   RETURN_CODE_VALID        1
#define   RETURN_CODE_INVALID      -1

@end example

Two all are return value of library function, next constants, are

@example

#define INFO_FORMAT_PLAINTEXT      0
#define INFO_FORMAT_MARKDOWN       10
#define INFO_FORMAT_MARKUP         20

@end example 

Three all that are input value to one function @code{carramba_libs_info()}, they tell how will be look output from that function. Next we have standard in header file, function definitions:

@example

#ifndef CARRAMBA_LIBS_H_
#define CARRAMBA_LIBS_H_

@enddots{}

int iban_validation_test(const char *iban);

int regon_validation_test(const char *regon);

int pesel_validation_test(const char *pesel);

int nip_validation_test(const char *nip);

const char *carramba_libs_version();

const char *carramba_libs_info(int format);

int carramba_libs_api_test(const char *number); 

#endif /* CARRAMBA_LIBS_H_ */

@end example 

And include for manage purpose:

@example

@dots{}

#ifndef NIP_C_
#define NIP_C_		1
#endif

#ifndef REGON_C_
#define REGON_C_	1
#endif

#ifndef PESEL_C_
#define PESEL_C_	1
#endif

#ifndef IBAN_C_
#define IBAN_C_		1
#endif

@enddots{}

@end example 

Application to work with this library need include header file: 

@example 
#include   <carramba-libs.h>

@dots{} 

more

@enddots{}

@end example

at the top of source file.

@node Index, Function Index, Header file, Top 
@unnumbered Index
@cindex Index

@printindex cp

@node Function Index, Copying, Index, Top
@unnumbered Function Index
@cindex Function Index

@printindex fn

@node Copying, Top, Function Index, Top
@appendix GNU Free Documentation License

@cindex GNU FDL 
@include fdl-1.3.texi

@appendix GNU General Public License
@cindex GNU GPL 
@include gpl-3.0.texi

@bye
